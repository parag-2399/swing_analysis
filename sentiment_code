

'''





'''

components.html("""<hr style="height:10px;border:none;color:#333;background-color:#333;width:100%" /> """)


st.title("SENTIMENT ANALYSIS")

keyword=st.text_input("KEYWORD")
limit=st.number_input("LIMIT", min_value=1000, max_value=5000, value=1000, step=1000)

pos=0
neg=0
neu=0
consumer_key="c75e056gZU0V72rHCuB40KfB5"
consumer_sec='dRlMoJKTN7HTnP5amYZeKT2zKhB5WLhF34lowiGesXKmuV7G37'
access_token="1390979922798157824-7Z64W6WpUhwTt7WSoBX3rrdjq5njkI"
access_token_sec="1A3CMZbd3G0WBldgRORBcD8CLaPjsKQ2vr1AyqOyaYLK9"


def stop_word_removal(s):
    stop_words=['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', "you're", "you've", "you'll", "you'd", 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', 'she', "she's", 'her', 'hers', 'herself', 'it', "it's", 'its', 'itself', 'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', "that'll", 'these', 'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further', 'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more', 'most', 'other', 'some', 'such', 'no', 'nor', 'not', 'only', 'own', 'same', 'so', 'than', 'too', 'very', 's', 't', 'can', 'will', 'just', 'don', "don't", 'should', "should've", 'now', 'd', 'll', 'm', 'o', 're', 've', 'y', 'ain', 'aren', "aren't", 'couldn', "couldn't", 'didn', "didn't", 'doesn', "doesn't", 'hadn', "hadn't", 'hasn', "hasn't", 'haven', "haven't", 'isn', "isn't", 'ma', 'mightn', "mightn't", 'mustn', "mustn't", 'needn', "needn't", 'shan', "shan't", 'shouldn', "shouldn't", 'wasn', "wasn't", 'weren', "weren't", 'won', "won't", 'wouldn', "wouldn't"]
    a=''
    for i in s.split(' '):
        if i not in stop_words:
            a=a+i+' '
    return a

def stemmer(s):
    ps=PorterStemmer()
    a=''
    for i in s.split(' '):
        a=a+ps.stem(i)+' ' 
    return a




# connected to jump server of twitter
auth=tweepy.OAuthHandler(consumer_key,consumer_sec)

# now we can connect from jump server to web server of twitter
auth.set_access_token(access_token,access_token_sec)

# now we can connect to API storge server of twitter
api=tweepy.API(auth)


tweets = tweepy.Cursor(api.search_tweets, q=keyword, count=100000, tweet_mode='extended').items(limit)



try:
    columns = ['User', 'Tweet']
    data = []

    for tweet in tweets:
        word=tweet.full_text
        word=stop_word_removal(word)
        word=stemmer(word)
        word=re.sub(r'(\s)#\w+|(\s)@\w+|rt|http\S+|[^\w]',' ',word)
        word=re.sub(' {2,}',' ',word)
        word=word.lower()
        analysis=TextBlob(word) # here it will apply NLP\
        
        if analysis.sentiment.polarity > 0:
            #print("posative")
            pos=pos+1
        elif analysis.sentiment.polarity == 0 :
            #print("Neutral")
            neu=neu+1
        else :
            #print("Negative")
            neg=neg+1
        
    # ploting graphs
    plt.xlabel("tags")
    plt.ylabel("polarity")
    #plt.bar(['pos','neg','neu'],[pos,neg,neu])
    
    #st.pyplot(plt.pie([pos,neg,neu],labels=['pos','neg','neu'],autopct="%1.1f%%"))
    labels=['pos','neg','neu']
    sizes = [pos,neg,neu]
    explode = (0.1, 0, 0)  # only "explode" the 2nd slice (i.e. 'Hogs')

    fig1, ax1 = plt.subplots()
    ax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',
            shadow=True, startangle=90)
    ax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.

    st.pyplot(fig1)
except:
    st.subheader("Plese enter keyword inside KEYWORD block")
